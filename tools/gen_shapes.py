"""
Generate numpy shape from atop C header file.
"""

import logging
import pycstruct
import os.path

_logger = logging.getLogger(__name__)


_PATH = os.path.dirname(__file__)
ROOT = os.path.join(_PATH, "..", "atop_raw", "headers")
filename = "atop_1_26_debian8_x86_64.h"


file_description = os.path.join(ROOT, filename)
c_structs = pycstruct.parse_file(file_description)


rawheader_t = c_structs["rawheader"]
rawrecord_t = c_structs["rawrecord"]
sstat_t = c_structs["sstat"]
pstat_t = c_structs["pstat"]

output = os.path.join(ROOT, filename.replace(".h", ".py"))

content = f'''
"""
Autogenerated file from {filename}
using pycstruct and castxml
"""
class Struct:
    def __init__(self, dtype, size):
        self._dtype = dtype
        self._size = size

    def dtype(self):
        return self._dtype

    def size(self):
        return self._size

dtype = {rawheader_t.dtype()}
size = {rawheader_t.size()}
rawheader_t = Struct(dtype, size)

dtype = {rawrecord_t.dtype()}
size = {rawrecord_t.size()}
rawrecord_t = Struct(dtype, size)

dtype = {sstat_t.dtype()}
size = {sstat_t.size()}
sstat_t = Struct(dtype, size)

dtype = {pstat_t.dtype()}
size = {pstat_t.size()}
pstat_t = Struct(dtype, size)
'''

with open(output, "wt") as f:
    f.write(content)
